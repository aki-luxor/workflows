name: Publish

on:
  workflow_call:
    inputs:
      go-version:
        description: Set the Go version to use. It is not recommended to use this input.
        type: string
        required: false
        default: "1.25"
      linux-build-args:
        description: Arguments to pass to `go build` for Linux
        type: string
        required: true
        default: -trimpath -a -ldflags '-s -w'
      macos-build-args:
        description: Arguments to pass to `go build` for macOS
        type: string
        required: true
        default: -trimpath -a -ldflags '-s -w'
      windows-build-args:
        description: Arguments to pass to `go build` for Windows
        type: string
        required: true
        default: -trimpath -a -ldflags '-s -w'
      go-test-args:
        description: Arguments to pass to `go test`
        type: string
        required: false
        default: -race;-tags=testing netgo
      cgo-enabled:
        description: corresponds to CGO_ENABLED
        type: number
        required: false
        default: 0
      dockerfile:
        description: The Dockerfile to use
        type: string
        required: false
        default: Dockerfile
      project:
        description: The project to build
        type: string
        required: true
      project-desc:
        description: A short description of the project to build
        type: string
        required: true
      version-tag:
        description: The git tag of the version to publish
        type: string
        required: true

env:
  CGO_ENABLED: ${{ inputs.cgo-enabled }}

jobs:
  docker:
    name: Docker
    runs-on: tenki-standard-autoscale
    permissions:
      packages: write
      contents: read
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
      - name: Test
        uses: SiaFoundation/workflows/.github/actions/go-test@master
        with:
          go-test-args: ${{ inputs.go-test-args }}
      - uses: docker/setup-qemu-action@v3
        with:
          cache-image: false
      - uses: docker/setup-buildx-action@v3
        with:
          cache-binary: false
      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Normalize Package Name
        shell: bash
        run: |
          # Docker image tags require all lowercase
          echo "DOCKER_IMAGE_TAG=ghcr.io/${GITHUB_REPOSITORY,,}" >> $GITHUB_ENV
      - uses: docker/metadata-action@v5
        name: generate tags
        id: meta
        with:
          images: ${{ env.DOCKER_IMAGE_TAG }}
          tags: |
            type=ref,event=branch
            type=sha,prefix=
            type=semver,pattern={{version}}
      - uses: docker/build-push-action@v5
        with:
          context: .
          file: ${{ inputs.dockerfile }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  linux:
    name: Build Linux
    runs-on: ubuntu-publish
    strategy:
      matrix:
        go-arch: [amd64, arm64]
    env:
      RELEASE_NAME: ${{ inputs.project }}_linux_${{ matrix.go-arch }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
      - name: Test
        uses: SiaFoundation/workflows/.github/actions/go-test@master
        with:
          go-test-args: ${{ inputs.go-test-args }}
      - name: Setup CGO
        if: ${{ inputs.cgo-enabled }}
        run: |
          if [ ${{ matrix.go-arch }} == "arm64" ]; then
            sudo apt update
            sudo apt install -y gcc-aarch64-linux-gnu
            echo "CC=aarch64-linux-gnu-gcc" >> $GITHUB_ENV
          fi
      - name: Build
        run: |
          # generate and download packages
          go mod download
          go generate ./...

          # build binaries
          GOARCH=${{matrix.go-arch}} go build -o bin/ ${{ inputs.linux-build-args }} ./...

          # package
          mkdir -p release
          ZIP_OUTPUT=release/$RELEASE_NAME.zip
          cp README.md LICENSE bin/
          zip -qj $ZIP_OUTPUT bin/*
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME}}
          path: release/*
  macos:
    name: Build macOS
    runs-on: macos-latest
    strategy:
      matrix:
        go-arch: [amd64, arm64]
    env:
      RELEASE_NAME: ${{ inputs.project }}_darwin_${{ matrix.go-arch }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
      - name: Test
        uses: SiaFoundation/workflows/.github/actions/go-test@master
        with:
          go-test-args: ${{ inputs.go-test-args }}
      - name: Setup
        env:
          APPLE_CERT_ID: ${{ secrets.APPLE_CERT_ID }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_KEY_B64: ${{ secrets.APPLE_KEY_B64 }}
          APPLE_CERT_B64: ${{ secrets.APPLE_CERT_B64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # extract apple cert
          APPLE_CERT_PATH=$RUNNER_TEMP/apple_cert.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$APPLE_CERT_B64" | base64 --decode --output $APPLE_CERT_PATH

          # extract apple key
          mkdir -p ~/private_keys
          APPLE_API_KEY_PATH=~/private_keys/AuthKey_$APPLE_API_KEY.p8
          echo -n "$APPLE_KEY_B64" | base64 --decode --output $APPLE_API_KEY_PATH

          # create temp keychain
          security create-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$APPLE_KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import keychain
          security import $APPLE_CERT_PATH -P $APPLE_CERT_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security find-identity -v $KEYCHAIN_PATH -p codesigning
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $APPLE_KEYCHAIN_PASSWORD $KEYCHAIN_PATH

          # resync system clock https://github.com/actions/runner/issues/2996#issuecomment-1833103110
          sudo sntp -sS time.windows.com
      - name: Build
        env:
          APPLE_CERT_ID: ${{ secrets.APPLE_CERT_ID }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_KEY_B64: ${{ secrets.APPLE_KEY_B64 }}
          APPLE_CERT_B64: ${{ secrets.APPLE_CERT_B64 }}
          APPLE_CERT_PASSWORD: ${{ secrets.APPLE_CERT_PASSWORD }}
          APPLE_KEYCHAIN_PASSWORD: ${{ secrets.APPLE_KEYCHAIN_PASSWORD }}
        run: |
          # generate and download packages
          go mod download
          go generate ./...

          # build binaries
          GOARCH=${{matrix.go-arch}} go build -o bin/ ${{ inputs.macos-build-args }} ./...

          # sign built binaries
          for file in bin/*; do
            /usr/bin/codesign --deep -f -v --timestamp -o runtime,library -s $APPLE_CERT_ID $file
          done

          # package
          mkdir -p release
          ZIP_OUTPUT=release/$RELEASE_NAME.zip
          # copy meta files to bin
          cp README.md LICENSE bin/
          # zip binaries with ditto for notarytool
          ditto -ck bin $ZIP_OUTPUT
          # submit to notary service
          xcrun notarytool submit -k ~/private_keys/AuthKey_$APPLE_API_KEY.p8 -d $APPLE_API_KEY -i $APPLE_API_ISSUER --wait --timeout 10m $ZIP_OUTPUT
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME}}
          path: release/*
  windows:
    name: Build Windows
    runs-on: ${{ matrix.go-arch == 'arm64' && 'windows-publish-arm64' || 'windows-publish' }}
    strategy:
      matrix:
        go-arch: [amd64] #, arm64]
    env:
      RELEASE_NAME: ${{ inputs.project }}_windows_${{ matrix.go-arch }}
    steps:
      - name: Configure Git # required for golangci-lint on Windows
        shell: bash
        run: git config --global core.autocrlf false
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ inputs.go-version }}
      - name: Test
        uses: SiaFoundation/workflows/.github/actions/go-test@master
        with:
          go-test-args: ${{ inputs.go-test-args }}
      - name: Setup
        shell: bash
        run: |
          dotnet tool install --global AzureSignTool
          go generate ./...
      - name: Build
        env:
          GOOS: windows
        shell: bash
        run: |
          # generate and download packages
          go mod download
          go generate ./...

          # build binaries
          GOARCH=${{matrix.go-arch}} go build -o bin/ ${{ inputs.windows-build-args }} ./...

          # sign built binaries
          for file in bin/*; do
            azuresigntool sign -kvu "${{ secrets.AZURE_KEY_VAULT_URI }}" -kvi "${{ secrets.AZURE_CLIENT_ID }}" -kvt "${{ secrets.AZURE_TENANT_ID }}" -kvs "${{ secrets.AZURE_CLIENT_SECRET }}" -kvc ${{ secrets.AZURE_CERT_NAME }} -tr http://timestamp.digicert.com -v $file
          done

          # package
          mkdir -p release
          ZIP_OUTPUT=release/$RELEASE_NAME.zip
          cp README.md LICENSE bin/
          7z a $ZIP_OUTPUT ./bin/*
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ env.RELEASE_NAME}}
          path: release/*
  combine-release-assets:
    runs-on: ubuntu-latest
    needs: [linux, macos, windows]
    steps:
      - name: Merge Artifacts
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ inputs.project }}
  homebrew: # only runs when version-tag is a stable release tag (doesn't contain '-')
    if: startsWith(inputs.version-tag, 'v') && !contains(inputs.version-tag, '-')
    needs: [combine-release-assets]
    runs-on: ubuntu-latest
    steps:
      - name: Dispatch
        uses: peter-evans/repository-dispatch@v3
        with:
          token: ${{ secrets.PAT_REPOSITORY_DISPATCH }}
          repository: siafoundation/homebrew-sia
          event-type: release-tagged
          client-payload: >
            {
              "description": "${{ inputs.project-desc }}",
              "tag": "${{ inputs.version-tag }}",
              "project": "${{ inputs.project }}",
              "workflow_id": "${{ github.run_id }}"
            }
